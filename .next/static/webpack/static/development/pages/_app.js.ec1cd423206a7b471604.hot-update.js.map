{"version":3,"file":"static/webpack/static/development/pages/_app.js.ec1cd423206a7b471604.hot-update.js","sources":["webpack:///./lib/initApollo.ts"],"sourcesContent":["import {\n   ApolloClient,\n   InMemoryCache,\n   NormalizedCacheObject\n} from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { isBroswer } from \"./isBroswer\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!isBroswer) {\n   //@ts-ignore\n   global.fetch = fetch;\n}\n\ninterface Options {\n   getToken: () => string;\n}\n\nfunction create(\n   initialState: any,\n   { getToken }: Options\n): ApolloClient<NormalizedCacheObject> {\n   const httpLink = createHttpLink({\n      uri: \"http://localhost:4000/grapqhl\",\n      credentials: \"include\"\n   });\n\n   const authLink = setContext((_, { headers }) => {\n      const token = getToken();\n      return {\n         headers: {\n            ...headers,\n            // authorization: token ? `Bearer ${token}` : \"\"\n            cookie: token ? `qid=${token}` : \"\"\n         }\n      };\n   });\n\n   // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n   return new ApolloClient({\n      connectToDevTools: isBroswer,\n      ssrMode: !isBroswer, // Disables forceFetch on the server (so queries are only run once)\n      link: authLink.concat(httpLink),\n      cache: new InMemoryCache().restore(initialState || {})\n   });\n}\n\nexport default function initApollo(\n   initialState: any,\n   options: Options\n): ApolloClient<NormalizedCacheObject> {\n   // Make sure to create a new client for every server-side request so that data\n   // isn't shared between connections (which would be bad)\n   if (!isBroswer) {\n      return create(initialState, options);\n   }\n\n   // Reuse client on the client-side\n   if (!apolloClient) {\n      apolloClient = create(initialState, options);\n   }\n\n   return apolloClient;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAHA;AADA;AAOA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}